////////////////////////////////////////////////////////////////////////////////
//
//    Copyright (c) 2022 - 2024.
//    Haixing Hu, Qubit Co. Ltd.
//
//    All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
package ltd.qubit.commons.random.randomizers.misc;

import java.util.Random;

import ltd.qubit.commons.random.Context;
import ltd.qubit.commons.random.api.ContextAwareRandomizer;
import ltd.qubit.commons.random.api.Randomizer;

/**
 * A {@link Randomizer} which, according to the optional percent, returns the
 * random value from a delegate.
 *
 * @param <T>
 *         the type generated by this randomizer
 * @author Eric Taix, Haixing Hu
 */
public class OptionalRandomizer<T> implements ContextAwareRandomizer<T> {

  private static final int MAX_PERCENT = 100;

  private final Random random;
  private final Randomizer<T> delegate;
  private final int optionalPercent;

  /**
   * Create a new {@link OptionalRandomizer} with a delegate randomizer and an
   * optional percent threshold.
   *
   * @param delegate
   *         The delegate to use to retrieve a random value
   * @param optionalPercent
   *         The percent of randomized value to return (between 0 and 100)
   */
  public OptionalRandomizer(final Randomizer<T> delegate,
          final int optionalPercent) {
    this(System.currentTimeMillis(), delegate, optionalPercent);
  }

  /**
   * Create a new {@link OptionalRandomizer} with a delegate randomizer and an
   * optional percent threshold.
   *
   * @param seed
   *         The seed of the random number generator.
   * @param delegate
   *         The delegate to use to retrieve a random value
   * @param optionalPercent
   *         The percent of randomized value to return (between 0 and 100)
   */
  public OptionalRandomizer(final long seed, final Randomizer<T> delegate,
          final int optionalPercent) {
    this.random = new Random(seed);
    this.delegate = delegate;
    if (optionalPercent > MAX_PERCENT) {
      this.optionalPercent = MAX_PERCENT;
    } else if (optionalPercent < 0) {
      this.optionalPercent = 0;
    } else {
      this.optionalPercent = optionalPercent;
    }
  }

  @Override
  public void setContext(final Context context) {
    if (delegate instanceof ContextAwareRandomizer) {
      ((ContextAwareRandomizer) delegate).setContext(context);
    }
  }

  @Override
  public T getRandomValue() {
    final int randomPercent = random.nextInt(MAX_PERCENT);
    if (randomPercent <= optionalPercent) {
      return delegate.getRandomValue();
    }
    return null;
  }

}
