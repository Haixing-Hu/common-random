////////////////////////////////////////////////////////////////////////////////
//
//    Copyright (c) 2022 - 2023.
//    Haixing Hu, Qubit Ltd.
//
//    All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
package ltd.qubit.commons.random.randomizers.collection;

import java.util.ArrayList;
import java.util.List;

import ltd.qubit.commons.random.api.Randomizer;

/**
 * A custom {@link Randomizer} that generates a list of random values using a
 * delegate {@link Randomizer}.
 *
 * @param <T>
 *         the type of elements generated by this {@link Randomizer}
 * @author Eric Taix (eric.taix@gmail.com)
 */
public class ListRandomizer<T> extends CollectionRandomizer<T> {

  /**
   * Create a new {@link ListRandomizer} that will generate a list with a random
   * number of elements. Each element is generated by the {@link Randomizer}
   * parameter
   *
   * @param elementRandomizer
   *         the {@link Randomizer} to use to generate elements
   */
  public ListRandomizer(final Randomizer<T> elementRandomizer) {
    super(elementRandomizer);
  }

  /**
   * Create a new {@link ListRandomizer} that will generate a list with a fixed
   * number of elements. Each element is generated by the {@link Randomizer}
   * parameter
   *
   * @param elementRandomizer
   *         The {@link Randomizer} used to generate each element
   * @param nbElements
   *         The number of elements to generate
   */
  public ListRandomizer(final Randomizer<T> elementRandomizer,
          final int nbElements) {
    super(elementRandomizer, nbElements);
  }

  @Override
  public List<T> getRandomValue() {
    final List<T> result = new ArrayList<>(nbElements);
    for (int i = 0; i < nbElements; i++) {
      result.add(getRandomElement());
    }
    return result;
  }

  @Override
  public String toString() {
    return "ListRandomizer [delegate=" + delegate + ", nbElements=" + nbElements + "]";
  }
}
